name: Terraform Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy
  push:
    branches: [ main ]
    paths:
    - 'terraform/**'
    - '.github/workflows/terraform-deploy.yml'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: ap-northeast-2

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./terraform
      
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform
      
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var="environment=${{ github.event.inputs.environment || 'production' }}" \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -out=tfplan
      working-directory: ./terraform
      
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      
    - name: Comment Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Plan 📋
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          `;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
        
    - name: Terraform Apply
      if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      run: terraform apply -auto-approve tfplan
      working-directory: ./terraform
      
    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy \
          -var="environment=${{ github.event.inputs.environment || 'production' }}" \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -auto-approve
      working-directory: ./terraform
      
    - name: Terraform Output
      if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      run: terraform output -json
      working-directory: ./terraform
      
    - name: Update GitHub Environment
      if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      run: |
        # Terraform 출력값을 GitHub Environment 변수로 설정
        OUTPUTS=$(terraform output -json)
        
        # CloudFront URL 설정
        CLOUDFRONT_URL=$(echo $OUTPUTS | jq -r '.cloudfront_domain_name.value')
        echo "CLOUDFRONT_URL=$CLOUDFRONT_URL" >> $GITHUB_ENV
        
        # ALB URL 설정
        ALB_URL=$(echo $OUTPUTS | jq -r '.alb_dns_name.value')
        echo "ALB_URL=$ALB_URL" >> $GITHUB_ENV
        
        # S3 버킷명 설정
        S3_BUCKET=$(echo $OUTPUTS | jq -r '.s3_bucket_name.value')
        echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
      working-directory: ./terraform
